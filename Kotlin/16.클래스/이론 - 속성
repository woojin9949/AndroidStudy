속성(Property)
class User7 {
    val age:Int
    val name:String

    get(){
        ...
    }
    set(value:Int){
        ...
    }
    constructor(age:Int,name:String){
        this.age = age
        this.name = name
    }
}
->속성: age , name
val user = User7(20,"홍길동")
->println(user.age)  -> 20출력 -> 코틀린이 getter를 호출 해준다.

user.age = 30 -> 30으로 할당 -> 코틀린이 setter를 호출 해준다.



1.getter/setter   자바 개념
- getter : 클래스의 속성에 접근할떄
- setter : 클래스의 속성 값을 설정할때
- 기본적으로는 코틀린이 제공을 해주지만, 특별 기능을 추가할 경우 개발자 직접 작성
--------------------------------------------------------------------
2.lateinit
class User7 {
    lateinit var age:Int ->불가
    lateinit var name:String

}
-var로 선언한 속성만 적용가능하다
-주 생성자에서 사용 불가
-getter/setter 적용 불가
-nullable 적용 불가
-기초타입 속성 적용 불가
    -primitive type
    -String을 제외한 흔히 알고 있는 자료형
- isInitialized로 초기화 여부 확인

더블콜론 (::)
-Reflection 기능
-런타임에 프로그램의 구조를 조사 할 수 있는 기능
-lateinit의 초기화 여부는 런타임이 아니면 알 수 없다.
-ex)
    -(::title.isInitalized)

lazy (지연 초기화)
- 초기화를 미루고 미뤄서 정말 필요할 순간에 초기화 (접근할때)
- lazy로 선언된 변수는 선언될때 , init블록에서가 아니라 실제로 접근할때 초기화한다.(user.xx)


class Computer{
    val ram: Ram =
}

